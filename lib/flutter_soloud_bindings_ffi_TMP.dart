// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings to SoLoud
class FlutterSoLoudFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterSoLoudFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterSoLoudFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Pause already loaded sound identified by [handle]
  /// @param handle
  void pause(
    int handle,
  ) {
    return _pause(
      handle,
    );
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('pause');
  late final _pause = _pausePtr.asFunction<void Function(int)>();

  /// @brief Play already loaded sound identified by [handle]
  /// @param handle
  void play(
    int handle,
  ) {
    return _play(
      handle,
    );
  }

  late final _playPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('play');
  late final _play = _playPtr.asFunction<void Function(int)>();

  /// @brief Stop already loaded sound identified by [handle] and clear it
  /// @param handle
  void stop(
    int handle,
  ) {
    return _stop(
      handle,
    );
  }

  late final _stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('stop');
  late final _stop = _stopPtr.asFunction<void Function(int)>();
}
