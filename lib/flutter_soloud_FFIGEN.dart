// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings to SoLoud
class FlutterSoLoudFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterSoLoudFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterSoLoudFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Set a new frequence of an already loaded waveform identified by [hash]
  ///
  /// [hash] the unique sound hash of a waveform sound
  /// [newFreq]
  void setWaveformFreq(
    int hash,
    double newFreq,
  ) {
    return _setWaveformFreq(
      hash,
      newFreq,
    );
  }

  late final _setWaveformFreqPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.Float)>>(
      'setWaveformFreq');
  late final _setWaveformFreq =
      _setWaveformFreqPtr.asFunction<void Function(int, double)>();

  /// Set a new frequence of an already loaded waveform identified by [hash]
  ///
  /// [hash] the unique sound hash of a waveform sound
  /// [superwave]
  void setSuperWave(
    int hash,
    int superwave,
  ) {
    return _setSuperWave(
      hash,
      superwave,
    );
  }

  late final _setSuperWavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.Int)>>(
          'setSuperWave');
  late final _setSuperWave =
      _setSuperWavePtr.asFunction<void Function(int, int)>();
}

final class CaptureDevice extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.UnsignedInt()
  external int isDefault;
}
