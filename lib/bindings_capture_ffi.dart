// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;


/// Possible capture errors
enum CaptureErrors {
  /// No error
  captureNoError,

  ///
  captureInitFailed,

  ///
  captureNotInited,

  /// null pointer. Could happens when passing a non initialized
  /// pointer (with calloc()) to retrieve FFT or wave data
  nullPointer,
}

/// FFI bindings to capture with miniaudio
class FlutterCaptureFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterCaptureFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterCaptureFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// --------------------- copy here the new functions to generate
  CaptureErrors initCapture() {
    final e = _initCapture();
    return CaptureErrors.values[e];
  }

  late final _initCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('initCapture');
  late final _initCapture = _initCapturePtr.asFunction<int Function()>();

  void disposeCapture() {
    return _disposeCapture();
  }

  late final _disposeCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('disposeCapture');
  late final _disposeCapture = _disposeCapturePtr.asFunction<void Function()>();

  bool isCaptureInited() {
    return _isCaptureInited() == 1 ? true : false;
  }

  late final _isCaptureInitedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('isCaptureInited');
  late final _isCaptureInited =
      _isCaptureInitedPtr.asFunction<int Function()>();

  CaptureErrors startCapture() {
    return CaptureErrors.values[_startCapture()];
  }

  late final _startCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('startCapture');
  late final _startCapture = _startCapturePtr.asFunction<int Function()>();

  CaptureErrors stopCapture() {
    return CaptureErrors.values[_stopCapture()];
  }

  late final _stopCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('stopCapture');
  late final _stopCapture = _stopCapturePtr.asFunction<int Function()>();

  CaptureErrors getCaptureAudioTexture2D(
    ffi.Pointer<ffi.Pointer<ffi.Float>> samples,
  ) {
    int ret = _getCaptureAudioTexture2D(samples);
    return CaptureErrors.values[ret];
  }

  late final _getCaptureAudioTexture2DPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Float>>)>>(
      'getCaptureAudioTexture2D');
  late final _getCaptureAudioTexture2D = _getCaptureAudioTexture2DPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Float>>)>();

  CaptureErrors setCaptureFftSmoothing(double smooth) {
    int ret = _setCaptureFftSmoothing(smooth);
    return CaptureErrors.values[ret];
  }

  late final _setCaptureFftSmoothingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>(
          'setCaptureFftSmoothing');
  late final _setCaptureFftSmoothing =
      _setCaptureFftSmoothingPtr.asFunction<int Function(double)>();
}

